/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  app.use(bodyParser.json());

   
//Make array to store task info sent by client 
let tasks =[];
let taskId = 1001;
  
 app.get("/todos" , (req ,res )=>{
    res.send(tasks);
 }) 


 //Retreive Specific to do Items ;;;; tasks.find(t => {t.id === req.body.})  /// parseInt(req.params.id ,10)
 app.get("/todos:id",(req ,res) =>{
    
    if(req.body.id && (req.body.id)- 1000 <= tasks.length){

        res.send(tasks.find(t => t.id === req.body.id));
        
    }
    else{
        res.status(500).json({
            id : "id is invalid"
        })
    }
 })


 app.post("/todos" , (req ,res) => {
    const todoTask = req.body;
    todoTask["id"]= taskId++;
    tasks.push(todoTask);

    res.json({
        msg : "Task list Updated"
    });
 })

 //Make changes in a specific task

 app.put("/todos:id",(req , res) =>{
    if(req.body.id && req.body.id - 1000 <= tasks.length)
    {
        let obj = req.body;
        tasks[tasks.findIndex(t => t.id === req.body.id)] = obj;
        res.json({
            msg : "changes done"
        })
    }
    else
    {
        res.status(500).json({
            msg:"Invalid Id"
        })
    }
 })

 //Finalyy delete the taskList

 app.delete("/todos:id" , (req , res) => {
       if(req.body.id && req.body.id - 1000 <= tasks.length)
       {
        tasks = tasks.filter(t => t.id != req.body.id);
        res.json({
            msg:"Item Deleted"
        });
       }
       else{
        res.status(500).json({
            msg:"Invalid id"
        })
       }

 })

 app.listen(3001);